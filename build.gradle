import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardCopyOption
import java.util.stream.Collectors

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

group = "net.kunmc.lab"
version = "1.2.0"

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.dmulloy2.net/repository/public/"
    }
    maven {
        url = 'https://jitpack.io'
    }
}

dependencies {
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"
    //compileOnly "com.comphenix.protocol:ProtocolLib:4.7.0"
    //compileOnly fileTree(dir: "./server/cache/", include: "patched_1.16.5.jar")
    //implementation "dev.kotx:flylib-reloaded:latest.release"
    //implementation 'com.github.TeamKun:ConfigLib:latest.release'
}

//import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
//task relocateShadow(type: ConfigureShadowRelocation) {
//    target = tasks.shadowJar
//    prefix = project.group
//}
//tasks.shadowJar.dependsOn tasks.relocateShadow

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.build.dependsOn tasks.shadowJar

tasks.build {
    new File("./build/resources/main/plugin.yml").delete()
}

processResources {
    filteringCharset "UTF-8"
    filesMatching("**/plugin.yml") {
        filter(ReplaceTokens, tokens: [
                "name"     : rootProject.name,
                "version"  : version,
                "MainClass": getMainClassFQDN(projectDir.toPath())
        ])
    }
}

shadowJar {
    archiveFileName = "${rootProject.name}-${version}.jar"
}

task copyToServer(group: "copy", type: Copy) {
    mustRunAfter build
    from new File(buildDir.absolutePath, "libs/${rootProject.name}-${version}.jar")
    into "./server/plugins"
}

task copyProtocolLibToServer(group: "copy", type: Copy) {
    File file = configurations.compileClasspath.getFiles().stream()
            .filter(x -> x.getName().matches(".*ProtocolLib.*.jar"))
            .findFirst().orElse(null)
    if (file != null) {
        from file
        into "server/plugins"
    }
}

task buildAndCopy(group: "build") {
    dependsOn build, copyToServer
}

task downloadServerJar {
    URL url = new URL("https://papermc.io/api/v2/projects/paper/versions/1.16.5/builds/794/downloads/paper-1.16.5-794.jar ")
    File file = new File(projectDir.toPath().toAbsolutePath().toString() + "/server/server.jar")

    if (!file.exists()) {
        try (InputStream stream = url.openStream()) {
            Files.copy(stream, file.toPath(), StandardCopyOption.REPLACE_EXISTING)
        }
    }
}

task generatePatchedJar(group: "setup", dependsOn: downloadServerJar) {
    String serverDir = projectDir.toPath().toAbsolutePath().toString() + "/server"

    File file = new File(serverDir + "/cache/patched_1.16.5.jar")
    if (file.exists()) {
        return
    }

    try {
        Runtime runtime = Runtime.getRuntime()
        Process p = runtime.exec("java -jar " + serverDir + "/server.jar nogui", new String[0], new File(serverDir))
        p.waitFor()
        p.destroy()
    } catch (Exception e) {
        e.printStackTrace()
    }
}

static String getMainClassFQDN(Path projectPath) {
    List<Path> javaFileList = Files.walk(projectPath)
            .filter(x -> x.getFileName().toString().endsWith(".java"))
            .collect(Collectors.toList())
    Path mainClassFile = javaFileList.stream()
            .filter(path -> Files.lines(path).anyMatch(str -> str.contains("extends JavaPlugin")))
            .findFirst().get()
    return mainClassFile.toString().replace("\\", ".").replace("/", ".").replaceAll(".*src.main.java.|.java\$", "")
}
