import java.nio.file.Files
import java.nio.file.Path
import java.util.stream.Collectors

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

group = "net.kunmc.lab"
version = "1.0.0"

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.dmulloy2.net/repository/public/"
    }
}

dependencies {
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"
    //compileOnly "com.comphenix.protocol:ProtocolLib:4.7.0"
    //compileOnly fileTree(dir: "./server/cache/", include: "patched_1.16.5.jar")
    //compileOnly fileTree(dir: "./libs/", include: "patched_1.16.5.jar")
    //implementation "dev.kotx:flylib-reloaded:0.3.18"
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.build.dependsOn tasks.shadowJar

processResources {
    def props = [name: rootProject.name, version: version, MainClass: getMainClassFQDN(projectDir.toPath())]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

shadowJar {
    archiveFileName = "${rootProject.name}-${version}.jar"
}

task copyToServer(type: Copy) {
    mustRunAfter build
    from new File(buildDir.absolutePath, "libs/${rootProject.name}-${version}.jar")
    into "./server/plugins"
}

static String getMainClassFQDN(Path projectPath) {
    List<Path> javaFileList = Files.walk(projectPath)
            .filter(x -> x.getFileName().toString().endsWith(".java"))
            .collect(Collectors.toList())
    Path mainClassFile = javaFileList.stream()
            .filter(path -> Files.lines(path).anyMatch(str -> str.contains("extends JavaPlugin")))
            .findFirst().get()
    return mainClassFile.toString().replace("\\", ".").replace("/", ".").replaceAll(".*src.main.java.|.java\$", "")
}