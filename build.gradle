import com.google.gson.GsonBuilder

import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.time.Instant
import java.time.temporal.ChronoUnit

buildscript {
    dependencies {
        classpath "com.google.code.gson:gson:2.10"
    }
}

plugins {
    id "java"
    id "com.gradleup.shadow" version "8.3.5"
}

group = "net.kunmc.lab"
version = "1.0.0"

final String MC_VERSION = "1.16.5"

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "enginehub-maven"
        url = "https://maven.enginehub.org/repo/"
    }
    maven { url = "https://repo.dmulloy2.net/repository/public/" }
    maven { url = 'https://jitpack.io' }
    flatDir { dirs "server/cache", "libs" }
}

class PaperDependencyUrlAndJavaVersion {
    final String url
    final int javaVersion;

    PaperDependencyUrlAndJavaVersion(String url, int javaVersion) {
        this.url = url
        this.javaVersion = javaVersion
    }
}

final Map<String, PaperDependencyUrlAndJavaVersion> PAPER_DEPEND_AND_JAVA_VERSION_MAP = new HashMap<String, PaperDependencyUrlAndJavaVersion>() {
    {
        put("1.16.5", new PaperDependencyUrlAndJavaVersion("com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT", 8))
        put("1.17", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.17-R0.1-SNAPSHOT", 17))
        put("1.17.1", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT", 17))
        put("1.18", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.18-R0.1-SNAPSHOT", 17))
        put("1.18.1", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.18.1-R0.1-SNAPSHOT", 17))
        put("1.18.2", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.18.2-R0.1-SNAPSHOT", 17))
        put("1.19", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.19-R0.1-SNAPSHOT", 17))
        put("1.19.1", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.19.1-R0.1-SNAPSHOT", 17))
        put("1.19.2", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT", 17))
        put("1.19.3", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.19.3-R0.1-SNAPSHOT", 17))
        put("1.19.4", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT", 17))
        put("1.20", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.20-R0.1-SNAPSHOT", 21))
        put("1.20.1", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT", 21))
        put("1.20.2", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.20.2-R0.1-SNAPSHOT", 21))
        put("1.20.3", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.20.3-R0.1-SNAPSHOT", 21))
        put("1.20.4", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT", 21))
        put("1.20.5", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.20.5-R0.1-SNAPSHOT", 21))
        put("1.20.6", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.20.6-R0.1-SNAPSHOT", 21))
        put("1.21", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT", 21))
        put("1.21.1", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT", 21))
        put("1.21.3", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT", 21))
        put("1.21.4", new PaperDependencyUrlAndJavaVersion("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT", 21))
    }
}

dependencies {
    compileOnly PAPER_DEPEND_AND_JAVA_VERSION_MAP.get(MC_VERSION).url

    //compileOnly "com.sk89q.worldedit:worldedit-bukkit:latest.release"
    //compileOnly "com.sk89q.worldedit:worldedit-core:latest.release"
    //compileOnly "com.comphenix.protocol:ProtocolLib:latest.release"
    //compileOnly name: "patched_1.16.5"

    implementation 'com.github.TeamKun.CommandLib:bukkit:latest.release'
    implementation 'com.github.TeamKun.ConfigLib:bukkit:latest.release'
}

def targetJavaVersion = PAPER_DEPEND_AND_JAVA_VERSION_MAP.get(MC_VERSION).javaVersion
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

jar {
    doFirst {
        copy {
            from '.'
            into buildDir.name + '/resources/main/'
            include 'LICENSE*'
        }
    }
}

shadowJar {
    mergeServiceFiles()
    archiveFileName = "${rootProject.name}-${project.version}.jar"
    relocate "net.kunmc.lab.commandlib", "${project.group}.${project.name.toLowerCase()}.commandlib"
    relocate "net.kunmc.lab.configlib", "${project.group}.${project.name.toLowerCase()}.configlib"
}
tasks.build.dependsOn tasks.shadowJar

processResources {
    def props = [name: rootProject.name, version: version, MainClass: getMainClassFQCN(projectDir.toPath())]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

task copyToServer(group: "copy") {
    mustRunAfter build

    doLast {
        copy {
            from new File(buildDir.absolutePath, "libs/${rootProject.name}-${version}.jar")
            into "./server/plugins"
            rename { String fileName ->
                fileName.replace("-${version}", "")
            }
        }
    }
}

task copyProtocolLibToServer(group: "copy", type: Copy) {
    String fileNamePattern = ".*ProtocolLib.*.jar"

    boolean exists = new File("server/plugins/").listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.matches(fileNamePattern)
        }
    })
    if (exists) {
        return
    }

    configurations.compileClasspath.getFiles().stream()
            .filter(x -> x.getName().matches(fileNamePattern))
            .findFirst()
            .ifPresent(x -> {
                from x
                into "server/plugins"
            })
}

task buildAndCopy(group: "build") {
    dependsOn build, copyToServer
}

task downloadServerJar {
    File serverJarFile = new File(projectDir.toPath().toAbsolutePath().toString() + "/server/server.jar")
    if (serverJarFile.exists()) {
        return
    }

    File linksFile = Paths.get("./paper-version-links.json").toFile()
    if (!linksFile.exists() || Instant.ofEpochMilli(linksFile.lastModified()).isBefore(Instant.now().plus(1, ChronoUnit.DAYS))) {
        URL paperVersionLinksUrl = URI.create("https://raw.githubusercontent.com/liebki/MinecraftServerForkDownloads/refs/heads/main/paper_downloads.json").toURL()
        linksFile.createNewFile()
        try (InputStream stream = paperVersionLinksUrl.openStream(); FileWriter writer = new FileWriter(linksFile)) {
            byte[] allBytes = stream.readAllBytes()
            writer.write(new String(allBytes))
        }
    }

    Map<String, String> versionMap
    try (FileReader reader = new FileReader(linksFile)) {
        versionMap = new GsonBuilder().create().fromJson(reader, Map.class)
    }
    assert versionMap != null
    String serverUrl = versionMap.get(MC_VERSION)
    assert serverUrl != null

    try (InputStream stream = URI.create(serverUrl).toURL().openStream()) {
        Files.copy(stream, serverJarFile.toPath(), StandardCopyOption.REPLACE_EXISTING)
    }
}

task generatePatchedJar(group: "setup", dependsOn: downloadServerJar) {
    String serverDir = projectDir.toPath().toAbsolutePath().toString() + "/server"

    File file = new File(serverDir + "/cache/patched_1.16.5.jar")
    if (file.exists()) {
        return
    }

    try {
        Runtime runtime = Runtime.getRuntime()
        Process p = runtime.exec(new String[]{"java", "-jar", serverDir + "/server.jar", "nogui"}, new String[0], new File(serverDir))
        p.waitFor()
        p.destroy()
    } catch (Exception e) {
        e.printStackTrace()
    }
}

static String getMainClassFQCN(Path projectPath) {
    Path mainClassFile = Files.walk(projectPath)
            .filter(x -> x.getFileName().toString().endsWith(".java"))
            .filter(path -> Files.lines(path).anyMatch(str -> str.contains("extends JavaPlugin")))
            .findFirst()
            .get()
    return mainClassFile.toString().replace("\\", ".").replace("/", ".").replaceAll(".*src.main.java.|.java\$", "")
}
